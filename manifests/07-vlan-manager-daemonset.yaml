# 07-vlan-manager-daemonset.yaml
# 
# This YAML file defines the DaemonSet for the VLAN Manager in Linode LKE.
# It provisions a VLAN attachment on each worker node and manages the IP
# routing through configured scripts. This DaemonSet ensures that each node
# is correctly attached to the VLAN and ready for internal communication.
# 
# -----------------------------------------------------
# 📝 Parameters:
# 
# 1️⃣ hostNetwork          - Allows direct network access for VLAN configuration.
# 2️⃣ dnsPolicy            - Configures DNS policy for host networking.
# 3️⃣ serviceAccountName   - Uses RBAC to manage VLAN and Linode configurations.
# 4️⃣ image                - Docker image for executing the VLAN scripts.
# 5️⃣ command & args       - Shell commands to install dependencies and run scripts.
# 6️⃣ volumeMounts         - Mount paths for scripts and configuration files.
# 7️⃣ env                  - Environment variables fetched from ConfigMaps.
# 
# -----------------------------------------------------
# 🔄 Usage:
# 
# - This DaemonSet is deployed on every worker node in the cluster.
# - It configures VLAN attachment and IP routing through Linode CLI.
# - Dependencies are installed during initialization to ensure smooth execution.
# 
# -----------------------------------------------------
# 📌 Best Practices:
# 
# - Ensure that the "vlan-manager-scripts" ConfigMap is correctly configured.
# - Use security context for privileged operations.
# - Monitor logs for dependency installation and VLAN attachment.
# - Validate kubeconfig before executing Kubernetes commands.
# 
# -----------------------------------------------------
# 🖋️ Author:
# - Sandip Gangdhar
# - GitHub: https://github.com/sandipgangdhar
# 
# © Linode-LKE-Private-Network | Developed by Sandip Gangdhar | 2025
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  # Name and namespace for the DaemonSet
  name: vlan-manager
  namespace: kube-system

spec:
  # Selector for pod matching
  selector:
    matchLabels:
      app: vlan-manager

  template:
    metadata:
      labels:
        app: vlan-manager

    spec:
      # Enable host network for direct VLAN configuration
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet

      # Use the service account with required RBAC permissions
      serviceAccountName: vlan-manager-sa

      containers:
        - name: vlan-manager
          image: ghcr.io/sandipgangdhar/linode-lke-private-network:latest

          # Security context to allow privileged VLAN operations
          securityContext:
            privileged: true

          # Command and Arguments
          command: ["/bin/bash", "-c"]
          args: 
            - |
              echo "⏳ Waiting 60 seconds for DNS and Kubernetes API to stabilize..."
              sleep 60
              echo "🔄 Starting VLAN Manager Setup..."

              # === Configure Linode CLI ===
              mkdir -p /root/.linode-cli && \
              echo "$LINODE_CLI_CONFIG" > /root/.linode-cli/linode-cli && \
              chmod 600 /root/.linode-cli/* && \
              export LINODE_CLI_CONFIG="/root/.linode-cli/linode-cli" && \
              echo "✅ Linode CLI configuration completed."

              # === Copy Scripts ===
              cp --dereference /root/scripts/02-script-vlan-attach.sh /tmp/02-script-vlan-attach.sh && \
              chmod u+x /tmp/02-script-vlan-attach.sh && \
              ls_output_02_script_vlan_attach=`ls -l /tmp/02-script-vlan-attach.sh` && \
              echo "Ls output :- $ls_output_02_script_vlan_attach"
              cp --dereference /root/scripts/03-script-ip-allocate.sh /tmp/03-script-ip-allocate.sh && \
              chmod u+x /tmp/03-script-ip-allocate.sh && \
              ls_output_03_script_ip_allocate=`ls -l /tmp/03-script-ip-allocate.sh` && \
              echo "Ls output :- $ls_output_03_script_ip_allocate"
              echo "✅ Scripts copied and permissions set."

              # === Generate kubeconfig ===
              echo "🔄 Generating kubeconfig..."
              cat <<EOF > /tmp/kubeconfig
              apiVersion: v1
              kind: Config
              clusters:
              - cluster:
                  certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  server: https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS
                name: in-cluster
              contexts:
              - context:
                  cluster: in-cluster
                  user: in-cluster
                name: in-cluster
              current-context: in-cluster
              users:
              - name: in-cluster
                user:
                  token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              EOF

              export KUBECONFIG=/tmp/kubeconfig
              echo "✅ kubeconfig generated successfully."

              # === Execute VLAN Attachment Script ===
              echo "🚀 Starting VLAN Attachment Script..."
              /tmp/02-script-vlan-attach.sh
              #echo "🛌 Script execution complete. Sleeping indefinitely..."
              #sleep infinity

          # Environment variables
          env:
            - name: ROUTE_LIST
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: ROUTE_LIST
            - name: SUBNET
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: SUBNET
            - name: VLAN_LABEL
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: VLAN_LABEL
            - name: KUBECONFIG
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: KUBECONFIG
            - name: LINODE_CLI_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: LINODE_CLI_CONFIG
            - name: ENABLE_PUSH_ROUTE
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: ENABLE_PUSH_ROUTE
            - name: ENABLE_FIREWALL
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: ENABLE_FIREWALL
            - name: LKE_CLUSTER_ID
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: LKE_CLUSTER_ID
            - name: ETCD_ENDPOINTS
              value: "${ETCD_ENDPOINTS}"
          # Volume mounts for scripts
          volumeMounts:
            - name: vlan-manager-scripts
              mountPath: /root/scripts

      # Volumes to be mounted
      volumes:
        - name: vlan-manager-scripts
          configMap:
            name: vlan-manager-scripts

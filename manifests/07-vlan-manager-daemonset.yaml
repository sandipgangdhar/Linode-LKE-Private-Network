apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vlan-manager
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: vlan-manager
  template:
    metadata:
      labels:
        app: vlan-manager
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: vlan-manager-sa
      containers:
        - name: vlan-manager
          image: python:3.9
          securityContext:
            privileged: true
          command: ["/bin/bash", "-c"]
          args: 
            - |
              echo "🔄 Starting VLAN Manager Setup..."

              # === Install Dependencies ===
              apt-get update && \
              apt-get install -y jq apt-transport-https ca-certificates curl net-tools iproute2 && \
              echo "✅ Dependencies installed successfully."
              # === Check Installation ===
              if ! command -v ip &> /dev/null; then
                  echo "❌ ip command not found. Installation failed."
                  exit 1
              fi
              if ! command -v ifconfig &> /dev/null; then
                  echo "❌ net-tools package not found. Installation failed."
                  exit 1
              fi
              if ! command -v jq &> /dev/null; then
                  echo "❌ jq command not found. Installation failed."
                  exit 1
              fi

              # === Install kubectl ===
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
              chmod +x kubectl && mv kubectl /usr/local/bin/kubectl && \
              echo "✅ kubectl installed successfully."
              # === Check Installation ===
              if ! command -v kubectl &> /dev/null; then
                  echo "❌ kubectl command not found. Installation failed."
                  exit 1
              fi

              # === Install Python dependencies ===
              pip install --upgrade pip && \
              # === Check Installation ===
              if ! command -v pip &> /dev/null; then
                  echo "❌ pip command not found. Installation failed."
                  exit 1
              fi
              pip install linode-cli && \
              echo "✅ Linode CLI installed successfully."
              # === Check Installation ===
              if ! command -v linode-cli &> /dev/null; then
                  echo "❌ linode-cli command not found. Installation failed."
                  exit 1
              fi

              # === Configure Linode CLI ===
              mkdir -p /root/.linode-cli && \
              echo "$LINODE_CLI_CONFIG" > /root/.linode-cli/linode-cli && \
              chmod 600 /root/.linode-cli/* && \
              export LINODE_CLI_CONFIG="/root/.linode-cli/linode-cli" && \
              echo "✅ Linode CLI configuration completed."

              # === Copy Scripts ===
              cp --dereference /root/scripts/02-script-vlan-attach.sh /tmp/02-script-vlan-attach.sh && \
              chmod u+x /tmp/02-script-vlan-attach.sh && \
              cp --dereference /root/scripts/03-script-ip-allocate.sh /tmp/03-script-ip-allocate.sh && \
              chmod u+x /tmp/03-script-ip-allocate.sh && \
              echo "✅ Scripts copied and permissions set."

              # === Generate kubeconfig ===
              echo "🔄 Generating kubeconfig..."
              cat <<EOF > /tmp/kubeconfig
              apiVersion: v1
              kind: Config
              clusters:
              - cluster:
                  certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  server: https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS
                name: in-cluster
              contexts:
              - context:
                  cluster: in-cluster
                  user: in-cluster
                name: in-cluster
              current-context: in-cluster
              users:
              - name: in-cluster
                user:
                  token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              EOF

              export KUBECONFIG=/tmp/kubeconfig
              echo "✅ kubeconfig generated successfully."

              # === Execute VLAN Attachment Script ===
              echo "🚀 Starting VLAN Attachment Script..."
              /tmp/02-script-vlan-attach.sh
              echo "🛌 Script execution complete. Sleeping indefinitely..."
              sleep infinity
          env:
            - name: SUBNET
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: SUBNET
            - name: VLAN_LABEL
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: VLAN_LABEL
            - name: KUBECONFIG
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: KUBECONFIG
            - name: ROUTE_IP
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: ROUTE_IP
            - name: DEST_SUBNET
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: DEST_SUBNET
            - name: LINODE_CLI_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: vlan-manager-config
                  key: LINODE_CLI_CONFIG
          volumeMounts:
            - name: vlan-manager-scripts
              mountPath: /root/scripts

      volumes:
        - name: vlan-manager-scripts
          configMap:
            name: vlan-manager-scripts
